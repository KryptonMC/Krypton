/*
 * This file is part of the Krypton project, licensed under the GNU General Public License v3.0
 *
 * Copyright (C) 2021-2022 KryptonMC and the contributors of the Krypton project
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package org.kryptonmc.generators

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.STRING
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import net.minecraft.tags.TagKey
import java.nio.file.Path
import kotlin.io.path.exists
import kotlin.io.path.writeText

class TagGenerator(private val output: Path) {

    fun <S> run(catalogueType: Class<S>, name: String, typeName: String, parameterType: TypeName, parameterTypeName: String) {
        val returnType = TAG.parameterizedBy(parameterType)
        val file = FileSpec.builder(TAGS_PACKAGE, name)
            .indent("    ")
            .addImport("net.kyori.adventure.key", "Key")
            .addImport("$PACKAGE.resource", "ResourceKeys")
        val outputClass = TypeSpec.objectBuilder(ClassName(TAGS_PACKAGE, name)).autoGenerated().privateStaticFunction("get", returnType) {
            addParameter("key", STRING)
            addCode("return·TagKey.of(ResourceKeys.$typeName,·Key.key(key))")
        }
        catalogueType.collectFields(TagKey::class.java).forEach { outputClass.field(it.name, returnType, "get(\"${it.value.location.path}\")") }
        val out = StringBuilder()
        file.addType(outputClass.build()).build().writeTo(out)
        val outputFile = output.resolve("org/kryptonmc/api/tags").tryCreateDirectories().resolve("$name.kt")
        if (outputFile.exists()) return
        outputFile.tryCreateFile().writeText(out.toString().performReplacements("TagKey<$parameterTypeName>", name))
    }

    inline fun <reified S> run(name: String, typeName: String, parameterType: TypeName, parameterTypeName: String) {
        run(S::class.java, name, typeName, parameterType, parameterTypeName)
    }

    companion object {

        private const val TAGS_PACKAGE = "$PACKAGE.tags"
        private val TAG = ClassName(TAGS_PACKAGE, "TagKey")
    }
}
