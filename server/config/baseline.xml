<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>CollapsibleIfStatements:SavedDataPoolElementFeatureFix.kt$if (providerType != "minecraft:simple_state_provider" &amp;&amp; providerType != "minecraft:rotated_block_provider") { if (providerType == "minecraft:weighted_state_provider") { if (providerFirstEntryName == "minecraft:packed_ice" || providerFirstEntryName == "minecraft:blue_ice") return Optional.of("minecraft:pile_ice") if (providerFirstEntryName == "minecraft:jack_o_lantern" || providerFirstEntryName == "minecraft:pumpkin") return Optional.of("minecraft:pile_pumpkin") } }</ID>
    <ID>UseIfInsteadOfWhen:KryptonCommandManager.kt$KryptonCommandManager$when (exception) { BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand() -> Messages.COMMAND.UNKNOWN(command) else -> text(exception.message ?: "") }</ID>
    <ID>UnsafeCallOnNullableType:CrashReportCategory.kt$CrashReportCategory$stackTrace[0]!!</ID>
    <ID>UnsafeCallOnNullableType:GS4QueryHandler.kt$GS4QueryHandler$validChallenges[packet.socketAddress]!!</ID>
    <ID>UnsafeCallOnNullableType:GS4QueryHandler.kt$GS4QueryHandler$validChallenges[socketAddress]!!</ID>
    <ID>UnsafeCallOnNullableType:GenericThread.kt$GenericThread$thread!!</ID>
    <ID>UnsafeCallOnNullableType:KryptonChunk.kt$KryptonChunk$Material.KEYS.value(name)!!</ID>
    <ID>UnsafeCallOnNullableType:KryptonScheduler.kt$KryptonScheduler.KryptonTask$future!!</ID>
    <ID>UnsafeCallOnNullableType:Metrics.kt$KryptonMetrics$versionRegex.find(major)!!</ID>
    <ID>UnsafeCallOnNullableType:Metrics.kt$KryptonMetrics$versionRegex.find(major)!!.groups[0]!!</ID>
    <ID>UnsafeCallOnNullableType:PacketOutChunkData.kt$PacketOutChunkData$chunk.heightmaps[Heightmap.Type.MOTION_BLOCKING]!!</ID>
    <ID>UnsafeCallOnNullableType:PacketOutChunkData.kt$PacketOutChunkData$chunk.heightmaps[Heightmap.Type.WORLD_SURFACE]!!</ID>
    <ID>UnsafeCallOnNullableType:PacketOutTags.kt$PacketOutTags$registry(it)!!</ID>
    <ID>UnsafeCallOnNullableType:PlayerDataManager.kt$PlayerDataManager$Material.KEYS.value(it.getString("id").toKey())!!</ID>
    <ID>UnsafeCallOnNullableType:PlayerDataManager.kt$displayName!!</ID>
    <ID>UnsafeCallOnNullableType:PlayerDataManager.kt$meta!!</ID>
    <ID>UnsafeCallOnNullableType:TranslationService.kt$LanguageInfo$data["tag"].asString.toLocale()!!</ID>
    <ID>UnsafeCallOnNullableType:TranslationService.kt$TranslationRequester$request.body()!!</ID>
    <ID>UnsafeCallOnNullableType:TranslationService.kt$response.body()!!</ID>
    <ID>UnusedPrivateMember:Messages.kt$private fun quadText(key: String)</ID>
    <ID>UnusedPrivateMember:Messages.kt$private fun sixText(key: String)</ID>
    <ID>UnusedPrivateMember:WorldCoordinates.kt$WorldCoordinates.Companion$correctCenter: Boolean</ID>
    <ID>UnusedPrivateMember:utils.kt$locale: Locale</ID>
    <ID>VariableMaxLength:PacketCompressor.kt$PacketCompressor.Companion$// From Velocity private val MUST_USE_SAFE_AND_SLOW_COMPRESSION_HANDLING = java.lang.Boolean.getBoolean("krypton.increased-compression-cap")</ID>
    <ID>SpreadOperator:utils.kt$(bytes.size.toByte(), *bytes)</ID>
    <ID>ReturnFromFinally:KryptonServer.kt$KryptonServer$finally { restart() }</ID>
    <ID>ReturnFromFinally:RegionFile.kt$RegionFile$finally { file.use { it.force(true) } }</ID>
    <ID>UnsafeCallOnNullableType:ConfigTests.kt$ConfigTests$loader.load().get&lt;KryptonConfig>()!!</ID>
    <ID>UseOrEmpty:JSONBlocks.kt$RegistryBlock.Companion$json["properties"]?.let { context.deserialize(it) } ?: emptyMap&lt;String, List&lt;String>>()</ID>
    <ID>UseOrEmpty:JSONBlocks.kt$RegistryBlock.Companion$json["states"]?.let { context.deserialize(it) } ?: emptyList&lt;RegistryBlockState>()</ID>
    <ID>UseOrEmpty:JSONBlocks.kt$RegistryBlockState.Companion$json["properties"]?.let { context.deserialize(it) } ?: emptyMap&lt;String, String>()</ID>
  </ManuallySuppressedIssues>
</SmellBaseline>
